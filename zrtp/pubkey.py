#!/usr/bin/python3

# Project     : pyzrtp
# Copyright (C) 2017 Orange
# All rights reserved.
# This software is distributed under the terms and conditions of the 'BSD 3-Clause'
# license which can be found in the file 'LICENSE' in this package distribution.

class UnsupportedPubkeyType(Exception): pass

PUBKEY_VALUES = {
  # (generator, prime modulus)
  b'DH2k': (2, 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF),
  b'DH3k': (2, 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF),

  # NIST EC, not implemented
  # (gx, gy, a, b, p, n)
  b'EC25': (0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296, 0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5, 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC, 0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B, 0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B, 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551),
  b'EC38': (0xAA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7, 0x3617DE4A96262C6F5D9E98BF9292DC29F8F41DBD289A147CE9DA3113B5F0B8C00A60B1CE1D7E819D7A431D7C90EA0E5F, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC, 0xB3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973),
}

class DH_Pubkey:
  def __init__(self, name):
    assert(name in [b'DH2k', b'DH3k'])
    (self.g, self.p) = PUBKEY_VALUES[name]
    self.x = 2
    assert(self.p.bit_length() % 8 == 0)
    self.modulus_len = self.p.bit_length()>>3

  # returns bytes, in big-endian
  def generate_key(self):
    self.gx = pow(self.g, self.x, self.p)
    return self.gx.to_bytes(self.modulus_len, byteorder='big')

  # takes bytes, in big-endian
  def shared_secret(self, gy):
    self.gy = int.from_bytes(gy, byteorder='big')
    gxy = pow(self.gy, self.x, self.p)
    return gxy.to_bytes(self.modulus_len, byteorder='big')

class NistEC_Pubkey:
  def __init__(self, name):
    assert(name in [b'EC25', b'EC38'])

PUBKEYS = (
  (b'DH2k', DH_Pubkey), # Diffie-Hellman 2048
  (b'EC25', None), # NIST EC Diffie-Hellman 256
  (b'DH3k', DH_Pubkey), # Diffie-Hellman 3072
  (b'EC38', None), # NIST EC Diffie-Hellman 384
  ('Mult', None), # Multistream
)

def get(name):
  pubkey = None
  for (pname, constructor) in PUBKEYS:
    if pname == name: return constructor(pname)
  if pubkey is None: raise UnsupportedPubkeyType(name)


'''
DH3K test case
'''
x = 0x3D5EB3E53160FA4CF898A51692BEFD9B19988DD668F7B21372A979B8F49AC6DE
g = 2
assert(g == PUBKEY_VALUES[b'DH3k'][0])

p = 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF
assert(p == PUBKEY_VALUES[b'DH3k'][1])

gx = 0x3DE26220BF84BE99773746A5588151FE05CD26F43DC511064F858CB7D1FF5DDD1CA28933604E8FFC8EBB17CD975CBD97A8B52773AF6EA3641715DF1461B902BE2C87E05CB1588ED4B4F91655EEDA9F55D8CBBA0F34B207FA27940DD4671D707BD03EC9372F2F5B68AEEBF7A9FFB00C2431458DAB7C7FDE050F7CB46B81EEDFB757B103BC9B089C7221E868BD3021727B2A534FBCB09827B4275755631FFDC475DFBBABD92044EF0F14C7489D30BC89490B3F2B133CDEA2B690C34107BE324B8389AE3F94D9CB598A55B1874633E01F347924DCD6907E3FF837FF9C90F59CEB8F87CF72B3478B4CBE1399CD47CB864636C5FA671FE0625E8B5DCA73C66EB3D2A3F4ADD6D1DE526D24E0726180353717D8C7376A4224ABE367E1FC8CD045E491A4D3160D6B39C8FE06FA5712D3EB6D2618DDBC3076C6FCB82E381A19CE9760CB2A45E23C02819F25CE22EE4ECA463D4731C763CF9F598659DC23097E298E2664778D405BFF16BE7B2E11816B71506FED4CEAC58156D7CF7BA6CC3F5F585D90A8E6
assert(pow(g, x, p) == gx)

y = 0xC2D281A37D95DA42464B258E174620EA10A8833CDA2338C026BBAEB1109B8F9A
gy = 0x
assert(gy == pow(g, y, p))

gxy = (gx*gy) % p
gyx = (gy*gx) % p
assert(gxy == gyx)
